class ForegroundService : Service() {
    private val CHANNEL_ID = "ForegroundService Kotlin"

    companion object {
        fun startService(context: Context, message: String = "") {
            val startIntent = Intent(context, ForegroundService::class.java)
            startIntent.putExtra("inputExtra", message)
            context.startService(startIntent)
            SmsHelper.startRetryTimer(context)

            GlobalScope.launch(Dispatchers.IO) {
                while (SmsHelper.listenerStarted) {
                    launch(Dispatchers.IO) {
                        pingFakeServer(context)
                    }
                    delay(1 * 60 * 1000)
                }
            }
        }

        fun stopService(context: Context) {
            val stopIntent = Intent(context, ForegroundService::class.java)
            context.stopService(stopIntent)
        }

        private fun pingFakeServer(context: Context) {
            val df = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.mmmZ")
            val gmtTime = df.format(Date())

            val deviceId = Settings.Secure.getString(context.contentResolver, Settings.Secure.ANDROID_ID)

            val json =
                """
                {
                    "deviceId": "$deviceId",
                    "createdAt": "$gmtTime"
                }
            """
            try {
                Fuel.post("https://jsonplaceholder.typicode.com/posts")
                    .jsonBody(json)
                    .response { _, _, result ->
                        val (bytes, error) = result
                        if (bytes != null) {
                            //TODO
//                            println("[response bytes] ${String(bytes)}")
                        } else {
//                            println("[response error] ${error?.message}")
                        }
                    }
            } catch (e: Exception) {
                println("PINGFAKESERVER EXCEPTION ${e.message}")
            }
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        //do heavy work on a background thread
        val input = intent?.getStringExtra("inputExtra")
        createNotificationChannel()
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this,
            0, notificationIntent, 0
        )
        val notification = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("SMS Forwarder is running in background")
            .setContentText(input)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentIntent(pendingIntent)
            .build()
        startForeground(1, notification)

        return START_STICKY
    }

    override fun onTaskRemoved(rootIntent: Intent?) {
        SmsHelper.startRetryTimer(applicationContext)
        if (SharedPref(applicationContext).instance.getBoolean(PrefConst.FORWARD_INCOMING_SMS, false)) {
            startService(applicationContext, "New messages will be forwarded to server")
        }
        super.onTaskRemoved(rootIntent)
    }

    override fun onBind(intent: Intent): IBinder? {
        return null
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val serviceChannel = NotificationChannel(
                CHANNEL_ID, "Foreground Service Channel",
                NotificationManager.IMPORTANCE_DEFAULT
            )
            val manager = getSystemService(NotificationManager::class.java)
            manager!!.createNotificationChannel(serviceChannel)
        }
    }
}
