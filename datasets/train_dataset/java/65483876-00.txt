 class ReconnectionThread extends Thread{
        private WebSocketClient ws;
        private long delayMs;
        private int attempts;
        public ReconnectionThread(WebSocketClient ws, long delayMs, int attempts){
            this.ws = ws;
            this.delayMs = delayMs;
            this.attempts = attempts;
        }

        public void run(){
            boolean alive = this.ws.isOpen();
            int count = 0;

            while(!alive && count < this.attempts){
                try {
                    Thread.sleep(this.delayMs);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                try{
                    this.ws.sendPing();
                    alive = true;
                    connectWebSocket();
                    startStreaming();
                    count = 0;
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(getApplicationContext(), "Connection restablished.", Toast.LENGTH_SHORT).show();
                        }
                    });
                } catch(NotYetConnectedException | InterruptedException ex){
                    Log.i("WebSocket", "WebSocket ping failed, attempting reconnection.");
                    this.ws.reconnect();
                    alive = false;
                }

                if(count == this.attempts){
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(getApplicationContext(), "Unable to restablish connection, check your internet.", Toast.LENGTH_SHORT).show();
                        }
                    });
                }
            }
        }
    }
