//imports
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

//JPanel class
public class SnakePanel extends JPanel implements ActionListener {

//declared and initialized quite a few variables
static final int SCREEN_WIDTH =600;
static final int SCREEN_HEIGHT = 600;
static final int UNIT_SIZE = 20;
static final int GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT) / UNIT_SIZE;
final int[] x = new int[GAME_UNITS];
final int[] y = new int[GAME_UNITS];
static final int DELAY = 90;
int bodyParts = 5;
int foodEaten;
int foodX;
int foodY;
char direction = 'R';
boolean gameRunning = false;
Timer timer;
Random rng;

//JPanel constructor
SnakePanel() {

    rng = new Random();
    this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
    this.setBackground(new Color(30, 30, 30));
    this.setFocusable(true);
    this.addKeyListener(new controller());
    startGame();

}

//method responsible for stuff when the game starts
public void startGame() {
    newFood();
    gameRunning = true;
    timer = new Timer(DELAY, this);
    timer.start();

}

//graphics for the game
public void paintComponent(Graphics g) {

    super.paintComponent(g);
    draw(g);

}

//actually drawing stuff
public void draw(Graphics g) {

    if (gameRunning) {

        //This for loop is completely uneccesary, but it's good for visualizing how the screen is split up into equal indivdual units.
        for (int i = 0; i < SCREEN_HEIGHT / UNIT_SIZE; i++) {
            g.drawLine(i * UNIT_SIZE, 0, i * UNIT_SIZE, SCREEN_HEIGHT); 
            g.drawLine(0, i * UNIT_SIZE, SCREEN_WIDTH, i * UNIT_SIZE);
        }

        //drawing the food
        g.setColor(new Color(rng.nextInt(255), rng.nextInt(255), rng.nextInt(255))); //The apples that the snek eats are rainbow colored (=￣ω￣=)
        g.fillOval(foodX, foodY, UNIT_SIZE, UNIT_SIZE);

        //drawing the snake
        for (int i = 0; i < bodyParts; i++) {
            g.setColor(new Color(66, 130, 70));
            g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
        }

        //drawing the score
        g.setColor(Color.white);
        g.setFont(new Font("ds-digital", Font.BOLD, 25));
        FontMetrics metrics1 = getFontMetrics(g.getFont());
        g.drawString("Score: " + foodEaten, (SCREEN_WIDTH - metrics1.stringWidth("Score: " + foodEaten)) / 2, g.getFont().getSize());
    } else {
        gameOver(g);
    }

}

//method responsible for randomizing where the food spawns
public void newFood() {
    foodX = rng.nextInt((SCREEN_WIDTH / UNIT_SIZE)) * UNIT_SIZE;
    foodY = rng.nextInt((SCREEN_HEIGHT / UNIT_SIZE)) * UNIT_SIZE;
}

//for loop to make the snake move
public void snakeMove() {
    for (int i = bodyParts; i > 0; i--) {
        x[i] = x[i - 1];
        y[i] = y[i - 1];
    }

    //each character represents a direction, U for up, D for down, L for left, etc..
    switch (direction) {
        case 'U' -> y[0] -= UNIT_SIZE;
        case 'D' -> y[0] += UNIT_SIZE;
        case 'L' -> x[0] -= UNIT_SIZE;
        case 'R' -> x[0] += UNIT_SIZE;
    }
}

//this is kinda collision checking for if the snake head reaches where the food is.
public void checkFood() {
    if ((x[0] == foodX) && ((y[0] == foodY))) {

        bodyParts++;
        foodEaten++;
        newFood();
    }
}

//THE MOST IMPORTANT METHOD TO LOOK AT, I'M NOT SURE WHAT'S WRONG WITH IT, OR WETHER THIS METHOD IS EVEN THE PROBLEM.
public void collisionDetection() {

    //head to body collision
    for(int i = bodyParts;i>0;i--) {
        if ((x[0] == x[i]) && (y[0] == y[i])) {
            gameRunning = false;
            break;
        }
    }
    //head to left border collision
    if(x[0] < 0) {
        gameRunning = false;
    }
    //head to right border collision
    if(x[0] > SCREEN_WIDTH) {
        gameRunning = false;
    }
    //head to top border collision
    if(y[0] < 0) {
        gameRunning = false;
    }
    //head to bottom border collision
    if(y[0] > SCREEN_HEIGHT) {
        gameRunning = false;
    }

    if(!gameRunning) {
        timer.stop();
    }
}

//Game over screen
public void gameOver(Graphics g) {
    //score display after death
    g.setColor(Color.white);
    g.setFont(new Font("ds-digital", Font.BOLD, 30));
    FontMetrics metrics1 = getFontMetrics(g.getFont());
    g.drawString("High score: " + foodEaten, (SCREEN_WIDTH - metrics1.stringWidth("High score: " + foodEaten)) / 2, g.getFont().getSize());
    //game over text
    g.setColor(Color.white);
    g.setFont(new Font("Cooper Black", Font.BOLD, 65));
    FontMetrics metrics2 = getFontMetrics(g.getFont());
    g.drawString("Game Over", (SCREEN_WIDTH - metrics2.stringWidth("Game Over")) / 2, SCREEN_HEIGHT / 2);
}

//controls for the snake..
@Override
public void actionPerformed(ActionEvent e) {
    if (gameRunning) {
        snakeMove();
        checkFood();
        collisionDetection();
    }
    repaint();
}

public class controller extends KeyAdapter {
    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                if (direction != 'R') {
                    direction = 'L';
                }
                break;
            case KeyEvent.VK_RIGHT:
                if (direction != 'L') {
                    direction = 'R';
                }
                break;
            case KeyEvent.VK_UP:
                if (direction != 'D') {
                    direction = 'U';
                }
                break;
            case KeyEvent.VK_DOWN:
                if (direction != 'U') {
                    direction = 'D';
                }
                break;
        }
    }
}

}
