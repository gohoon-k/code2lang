#include <iostream>
#include <algorithm>
#include <map>
#include <stdio.h>
using namespace std;
#define INF 2147483647 
map<int, int> weight[5001];
int d[5001];
int visit[5001] = { 0 };    

int choose(int distance[], int n, int found[])
{
    int i, min, minpos;
    min = INF;
    minpos = -1;
    for (i = 1; i <= n; i++)
    {
        if (distance[i] < min && !found[i])
        {
            min = distance[i];
            minpos = i;
        }
    }
    return minpos;
}
int main(void)
{
    int N, M, num1, num2;

    //data input here.


    int i, u, w;
    for (i = 1; i <= N; i++)
    {
        if (weight[1].find(i) != weight[1].end()) d[i] = weight[1][i];
        else d[i] = INF;
        visit[i] = 0;
    }
    visit[1] = 1;
    d[1] = 0;
    for (i = 0; i < N; i++)
    {
        u = choose(d, N, visit);
        visit[u] = 1;
        for (w = 2; w <= N; w++)
        {
            if (!visit[w])
            {
                if ((weight[u].find(w) != weight[u].end()) && (d[u] + weight[u][w] < d[w]))
                {
                    d[w] = d[u] + weight[u][w];
                }
            }
        }
    }
    int max = d[2];
    int ii = 0;
    for (int i = 2; i <= N; i++) {
        if (d[i] > max) {
            max = d[i]; ii = i;
        }
    }
    cout << max << endl;
    
    return 0;
}
