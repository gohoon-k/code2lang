#include "Integer.h"
Integer::Integer() {
    cout << "Default constructor of Integer class" << endl;
}
Integer::~Integer() {
    cout << "Destructor of Integer class" << endl;
}

Integer::Integer(int* p) {
    //n = ptr;
    if(size!=0){
        for (int i = 0; i < size; i++) {
            //memcpy(p, ptr, 4 * sizeof(int));
            p = ptr;
            //ptr[i] = p[i];
            //ptr[i]=p[i];
    }

    }
}
istream& operator >> (istream& inp, Integer &obj) {
    inp >> obj.ptr[size-1];
    return inp;

}

int& Integer::operator[](int index) {
    if (index >= 0 && index < size) {
        return ptr[index];
    }
    /*if (index >= size && size<0) {
        cout << "Wrong size!" << endl;
        exit(0);
    }
    return ptr[index];*/
}


