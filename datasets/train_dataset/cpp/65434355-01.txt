    #include <cs50.h>
    #include <stdio.h>
    #include <string.h>
    // Max number of candidates
    #define MAX 9

    // Candidates have name and vote count
    typedef struct
    {
string name;
int votes;
    }
    candidate;

    // Array of candidates
    candidate candidates[MAX];

    // Number of candidates
    int candidate_count;

    // Function prototypes
    bool vote(string name);
    void print_winner(void);


    int main(int argc, string argv[])
    {
// Check for invalid usage
if (argc < 2)
{
    printf("Usage: plurality [candidate ...]\n");
    return 1;
}
// Populate array of candidates
candidate_count = argc - 1;
if (candidate_count > MAX)
{
    printf("Maximum number of candidates is %i\n", MAX);
    return 2;
}
for (int i = 0; i < candidate_count; i++)
{
    candidates[i].name = argv[i + 1];
    candidates[i].votes = 0;
}

int voter_count = get_int("Number of voters: ");

// Loop over all voters
for (int a = 0; a < voter_count; a++)
{
    string vote = get_string("Vote:");
    int check = 0;
//Check for invalid vote
    for (int i = 0; i < argc - 1; i++)
    {
        if (strcmp(candidates[ i ].name, vote) == 0)
        {
            check++;
            candidates[ i ].votes++;
        }
    }
    if (check == 0)
    {
        printf("Invalid Vote\n");
        a--;
    }
}  
// Display winner of election
int highvotes = 0;
for (int i = 0; i < voter_count; i++)
{
    if (highvotes < candidates[ i ].votes)
    {
        highvotes = candidates[ i ].votes;
    }
}
for (int i = 0; i < candidate_count; i++)
{
    if (candidates[ i ].votes == highvotes)
    {
        printf("%s\n", candidates[ i ].name);
    }
} 
    }
    // Update vote totals given a new vote
    bool vote(string name)
    {
for (int i = 0; i < candidate_count; i++)
{
    if (strcmp(candidates[ i ].name, name) == 0)
    {
        candidates[ i ].votes++;
        return true;
    }
}
return false;
    }
    // Print the winner (or winners) of the election
    void print_winner(void)
    {
        int highestvote = 0;
        for (int i = 0; i < candidate_count; i++)
        {
            if (highestvote < candidates[ i ].votes)
            {
                highestvote = candidates[ i ].votes;
            }
        }
        for (int i = 0; i < candidate_count; i++)
        {
            if (candidates[ i ].votes == highestvote)
            {
                printf("%s\n", candidates[ i ].name);
            }
        } 
    }
