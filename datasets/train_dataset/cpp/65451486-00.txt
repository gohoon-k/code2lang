std::condition_variable cond;
std::mutex m_mutex;
std::atomic<int> position_holder {0};
void access_fonksiyon(std::vector<int> myvec){
    std::unique_lock<std::mutex> locked {m_mutex};
    position_holder++;
    std::cout << "Locked." << std::endl;
    std::cout << "Position holder value : "
                << position_holder
                << "thread ID: "
                << std::this_thread::get_id()
                << std::endl;
}

int main(){
    std::vector<int> myvec = {1,2,3,4,5,6,7,8,9};
    std::vector<std::thread> thread_vec;
    for(int i = 0; i < 2; i++){
        thread_vec.push_back(std::thread(access_fonksiyon, std::ref(myvec)));
    }
    for (std::thread &reader : thread_vec){
        reader.join();
    }

    return 0;
}
