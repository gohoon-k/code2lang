            val networkSSID = "XXX"
            val networkPass = "XXX"
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                val wifiNetworkSpecifier: WifiNetworkSpecifier?

                if (networkPass.isEmpty()) {
                    wifiNetworkSpecifier =
                        WifiNetworkSpecifier.Builder().setSsid(networkSSID).build()
                } else {
                    wifiNetworkSpecifier = WifiNetworkSpecifier.Builder().setSsid(networkSSID)
                        .setWpa2Passphrase(networkPass).build()
                }

                val networkRequest = NetworkRequest.Builder()
                    .addTransportType(NetworkCapabilities.TRANSPORT_WIFI)
                    .setNetworkSpecifier(wifiNetworkSpecifier)
                    .build()

                val connectivityManager =
                    context?.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager?

                val networkCallback = object : ConnectivityManager.NetworkCallback() {
                    override fun onUnavailable() {
                        super.onUnavailable()
                    }

                    override fun onLosing(network: Network, maxMsToLive: Int) {
                        super.onLosing(network, maxMsToLive)

                    }

                    override fun onAvailable(network: Network) {
                        super.onAvailable(network)
                        connectivityManager?.bindProcessToNetwork(network)
                    }

                    override fun onLost(network: Network) {
                        super.onLost(network)

                    }
                }
                connectivityManager?.requestNetwork(networkRequest, networkCallback)


            } else {
                val wifiManager = context?.getSystemService(WIFI_SERVICE) as WifiManager?
                if (havePermission) {
                    var found = false
                    for (config in wifiManager?.configuredNetworks!!) {
                        if (config.SSID == String.format("\"%s\"", wifi.SSID)) {
                            wifiManager?.enableNetwork(config.networkId, true)
                            found = true
                            break
                        }
                    }

                    if (!found) {
                        val wifiConfiguration = WifiConfiguration()
                        wifiConfiguration.SSID = String.format("\"%s\"", networkSSID)
                        wifiConfiguration.preSharedKey = String.format("\"%s\"", networkPass)
                        val wifiID = wifiManager?.addNetwork(wifiConfiguration)
                        if (wifiID != null) {
                            wifiManager?.enableNetwork(wifiID, true)
                        }
                    }
                }
            }
