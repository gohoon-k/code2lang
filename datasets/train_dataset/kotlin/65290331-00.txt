fun update(type: Update) {
    if (model.list.isNotEmpty()) {
      fun List<UserList>.filter(listType: ListType): UserList? = this.firstOrNull { userList -> userList.listType == listType }

      val userList = type.list.filter(getTabSelectedListType())

      if (userList != null) {
        val listToShow = userList.toShoppingWrapper(model.cart)

        adapterShopping.update(listToShow, type.updateCurrentList)
        if (listToShow.isNotEmpty()) with(binding) {
          recyclerView.visible()
          emptyLayoutMyProducts.emptyView.gone()
          emptyLayoutFavorites.emptyView.gone()
          emptyLayoutLists.emptyView.gone()
        } else when (binding.tabLayout.getTabAt(binding.tabLayout.selectedTabPosition)?.tag) {
            PRODUCTS -> showMyProductsEmptyLayout()
            FAVORITES -> showFavoritesEmptyLayout()
        }
      } else when (binding.tabLayout.getTabAt(binding.tabLayout.selectedTabPosition)?.tag) {
        PRODUCTS -> showMyProductsEmptyLayout()
        FAVORITES -> showFavoritesEmptyLayout()
      }
    } else when (binding.tabLayout.getTabAt(binding.tabLayout.selectedTabPosition)?.tag) {
      PRODUCTS -> showMyProductsEmptyLayout()
      FAVORITES -> showFavoritesEmptyLayout()
    }
  }
