package com.example.qrscanner

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.budiyev.android.codescanner.*


    class MainActivity : AppCompatActivity() {
    
           

 private lateinit var codeScanner: CodeScanner
        val MY_CAMERA_PERMISSION_REQUEST = 1111
        var vin :String = "as"
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
    
    
    
            val scanner_View = findViewById<CodeScannerView>(R.id.scanner_View)
    
            codeScanner = CodeScanner(this,scanner_View)
            codeScanner.camera = CodeScanner.CAMERA_BACK
            codeScanner.formats = CodeScanner.ALL_FORMATS
            codeScanner.autoFocusMode = AutoFocusMode.SAFE
            codeScanner.scanMode = ScanMode.SINGLE
            codeScanner.isAutoFocusEnabled = true
            codeScanner.isFlashEnabled = false
    
    
    
    
            codeScanner.decodeCallback = DecodeCallback{
                runOnUiThread {
    
                    var Str = it.text
                    var delimeter="+"
                    val parts= Str.split( delimeter)
                    //vin = parts.first()
    
                    print(parts)
                    Toast.makeText(this, "Scan result: ${parts.first()}", Toast.LENGTH_LONG).show()
    
    
    
                }
            }
            codeScanner.errorCallback = ErrorCallback { // or ErrorCallback.SUPPRESS
                runOnUiThread {
                    Toast.makeText(this, "Camera initialization error: ${it.message}",
                        Toast.LENGTH_LONG).show()
                }
            }
    
            scanner_View.setOnClickListener {
                codeScanner.startPreview()
            }
            checkPermission()
    
    
        }
    
        fun checkPermission(){
            if(ContextCompat.checkSelfPermission(this,Manifest.permission.CAMERA)!=PackageManager.PERMISSION_GRANTED){
                ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.CAMERA),MY_CAMERA_PERMISSION_REQUEST)
            }else{
                codeScanner.startPreview()
            }
        }
    
        override fun onRequestPermissionsResult(
            requestCode: Int,
            permissions: Array<out String>,
            grantResults: IntArray
        ) =
            if (requestCode==MY_CAMERA_PERMISSION_REQUEST&&grantResults.isNotEmpty()&&grantResults[0]==PackageManager.PERMISSION_GRANTED){
                codeScanner.startPreview()
            }else{
                Toast.makeText(this,"Can not scan until you give camera permission",Toast.LENGTH_LONG).show()
            }
    
    
        override fun onResume() {
            super.onResume()
            codeScanner.startPreview()
        }
    
        override fun onPause() {
            codeScanner.releaseResources()
            super.onPause()
        }
    
    
    
    }
