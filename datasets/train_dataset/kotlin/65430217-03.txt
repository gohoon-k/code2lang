fun getBasket(id: Long) = performGetOperation(
        databaseQuery = { localDataSource.getBasketById(id) },
        networkCall = { remoteDataSource.getBasket(id) },
        saveCallResult = {
            it.listProduct?.toList()?.let { it1 ->
                localDataSource.updateBasketById(
                        id, it1
                )
            }
        }
)


fun <T, A> performGetOperation(
    databaseQuery: () -> LiveData<T>,
    networkCall: suspend () -> Resource<A>,
    saveCallResult: suspend (A) -> Unit
): LiveData<Resource<T>> =
    liveData(Dispatchers.IO) {
        emit(Resource.loading())
        val source = databaseQuery.invoke().map { Resource.success(it) }
        emitSource(source)

        val responseStatus = networkCall.invoke()
        if (responseStatus.status == SUCCESS) {
            saveCallResult(responseStatus.data!!)

        } else if (responseStatus.status == ERROR) {
            emit(Resource.error(responseStatus.message!!))
            emitSource(source)
        }
    }
