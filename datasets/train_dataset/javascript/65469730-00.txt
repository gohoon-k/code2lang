const DEL_SELECTOR = ".core-rail";
const mo = new MutationObserver(onMutation);
// in case the content script was injected after the page is partially loaded
onMutation([{addedNodes: [document.documentElement]}], true);
observe();

function onMutation(mutations, hideElements) {
  console.log("script test runs");
  const toRemove = [];
  for (const {
      addedNodes
    } of mutations) {
    for (const n of addedNodes) {
      if (n.tagName) {
        if (n.matches(DEL_SELECTOR)) {
          toRemove.push(n.children);
        } else if (n.firstElementChild && n.querySelector(DEL_SELECTOR)) {
          var matches = n.querySelectorAll(DEL_SELECTOR);

          for (var i = 0; i < matches.length; i++) {
            toRemove.push(...matches[i].children);
          }
        }
      }
    }
  }
  if (toRemove.length) {
    mo.disconnect();
    for (const el of toRemove) {
      try {
        //el.setAttribute('display', 'none');
        el.remove();
      } catch (e) {
        console.log(e);
      }
    }
    observe();
  }
}

function observe() {
  mo.observe(document, {
    subtree: true,
    childList: true,
  });
}
